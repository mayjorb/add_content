<?php
include_once('add_content.features.inc');

function add_content_init() {
  drupal_add_css(drupal_get_path('module', 'add_content') .'/theme/add_content.css');
}

/**
* @desc Implementation of hook_menu()
*/
function add_content_menu() {
  $menu['admin/settings/add_content'] = array(
    'title' => 'Add PNW Handbook Content',
    'description' => 'Adds content into multiple nodes.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('add_content_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $menu;
}

/**
* @desc add_content configuration
*/
function add_content_admin_settings() {
  $form['content'] = array(
    '#type' => 'textarea',
    '#title' => 'Enter content to import',
    '#required' => TRUE,
  ); 
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add Content'),
  );
  return $form;
}

function add_content_theme() {
  return array(
    'views_view_field__host_disease_descriptions' => array(
      'template' => 'views-view-field--host-disease-descriptions',
      'path' => drupal_get_path('module', 'add_content') . '/theme',
      'arguments' => array(
        'view' => NULL,
        'field' => NULL,
        'row' => NULL,
      ),
      'original hook' => 'views_view_field',
      'preprocess functions' => array(
        'template_preprocess',
        'template_preprocess_views_view_field',
      ),
    ),
    'views_view__host_disease_descriptions__page' => array(
      'template' => 'views-view--host-disease-descriptions--page',
      'path' => drupal_get_path('module', 'add_content') . '/theme',
      'arguments' => array(
        'view' => NULL,
      ),
      'original hook' => 'views_view',
      'preprocess functions' => array(
        'template_preprocess',
        'template_preprocess_views_view',
      ),
    ),
  );
}

function add_content_preprocess_page(&$variables) {
  if ($variables['node']->type == 'handbook_article') {
    $variables['title'] = preg_replace('/\(/', '(<em>', $variables['title'], 1);
    $variables['title'] = preg_replace('/(sp.)?\)/', '</em>$0', $variables['title'], 1);
    $variables['title'] = str_replace('var.', '</em>var.<em>', $variables['title']);
    $variables['title'] = preg_replace('/(\w+(?=\ssp\.))(?!((?![\(\)]).)*\))/', '<em>$0</em>', $variables['title']);

  }  
}

/**
* @desc add_content settings submission
*/
function add_content_admin_settings_submit($form, &$form_state)	{
  module_load_include('inc', 'node', 'node.pages');

  $text = $form_state['values']['content'];  
  $text = str_replace(array("\xe2\x80\x98", "\xe2\x80\x99", "\xe2\x80\x9c", "\xe2\x80\x9d", "\xe2\x80\x93", "\xe2\x80\x94", "\xe2\x80\xa6"), array("'", "'", '"', '"', '-', '-', '&hellip;'), $text);
  $text = str_replace(array(chr(145), chr(146), chr(147), chr(148), chr(150), chr(151), chr(133)), array("'", "'", '"', '"', '-', '-', '&hellip;'), $text);
  $text = trim($text);
  
  $handbook_data = split_text($text);

  $existing_nodes = array();
  // Load existing nodes
  $results = db_query("SELECT `nid`, `title` FROM `node` WHERE type IN ('handbook_article', 'handbook_page')");
  while ($result = db_fetch_array($results)) {
    $existing_nodes[$result['nid']] = $result['title'];
  }

  foreach ($handbook_data as $new_content) {
    $new_titles[] = strip_tags($new_content['title']);
    if (in_array(strip_tags($new_content['title']), $existing_nodes)) {
      $update_handbook_data[] = $new_content;
    } else {
      $new_handbook_data[] = $new_content;
    }
  }
  
  $not_changed = array_diff($existing_nodes, $new_titles);

  if (!empty($update_handbook_data)) {
    // Update a node
    foreach ($update_handbook_data as $update_content) {
     
      $result = db_fetch_object(db_query("SELECT `nid` FROM `node` WHERE type IN ('handbook_article', 'handbook_page') AND `title` = '%s' ORDER BY `title`", strip_tags($update_content['title'])));
      
      $node = node_load($result->nid);

      //pm($existing_nodes, 'existing nodes');

      // add see also links if match
      $pattern = '/(?<=<p class="See-also-link">)(.*?)(?=<\/p>)/';
      preg_match_all($pattern, $update_content['body'], $matches);
      if (count($matches) > 0) {
        foreach ($matches[1] as $value) {
          
          $new_value = trim(strip_tags($value));
          $new_value = preg_replace('/\s*-+\s*/', '-', $new_value);
          $link_nid = array_search($new_value, $existing_nodes);
          if ($link_nid) {
            $link_path = 'node/' . $link_nid;
            $see_also_link = l($value, $link_path, array('html' => TRUE));
            $update_content['body'] = str_replace($value, $see_also_link, $update_content['body']);
          }
        }
      }

      // add "see" links if match
      $pattern2 = '/(?<=<p class="See-link">)(.*?)(?=<\/p>)/';
      preg_match_all($pattern2, $update_content['body'], $matches2);
      // dpm($matches2,'see link matches');
      if (count($matches2) > 0) {
        foreach ($matches2[1] as $value) {
          
          $new_value = trim(strip_tags($value));

          $see_link = '<a href="' . url($base_path . 'host-disease-descriptions', array('query' => 'title=' . $new_value)) . '"> ' . $value . '</a>';

          $update_content['body'] = str_replace($value, $see_link, $update_content['body']);
        }
      }
      
      $node->field_handbook_article_body['0']['value'] = $update_content['body'];
      $node->revision = 1;
      if ($node = node_submit($node)) {
        node_save($node);
        $updated_nodes[] = $node->title;
      } else {
        $err[] = $result->nid;
      }
    }
  }

  if (!empty($new_handbook_data)) {
    // Create a new node
    foreach ($new_handbook_data as $new_content) {
      $form_state = array();
      $node = array('type' => 'handbook_article');
      $save_data['values']['title'] = strip_tags($new_content['title']);

      // add see also links if match
      $pattern = '/(?<=<p class="See-also-link">)(.*?)(?=<\/p>)/';
      preg_match_all($pattern, $new_content['body'], $matches);
      if (count($matches) > 0) {
        foreach ($matches[1] as $value) {
          
          $new_value = trim(strip_tags($value));
          $new_value = preg_replace('/\s*-+\s*/', '-', $new_value);
          $link_nid = array_search($new_value, $existing_nodes);

          if ($link_nid) {
            $link_path = 'node/' . $link_nid;
            $see_also_link = l($value, $link_path, array('html' => TRUE));
            $new_content['body'] = str_replace($value, $see_also_link, $new_content['body']);
          }
        }
      }

       // add "see" links if match
      $pattern2 = '/(?<=<p class="See-link">)(.*?)(?=<\/p>)/';
      preg_match_all($pattern2, $new_content['body'], $matches2);
      // dpm($matches2,'see link matches');
      if (count($matches2) > 0) {
        foreach ($matches2[1] as $value) {
          
          $new_value = trim(strip_tags($value));

          $see_link = '<a href="' . url($base_path . 'host-disease-descriptions', array('query' => 'title=' . $new_value)) . '"> ' . $value . '</a>';

          $new_content['body'] = str_replace($value, $see_link, $new_content['body']);
        }
      }
      global $user;
      $save_data['values']['field_handbook_article_body']['0']['value'] = $new_content['body'];
      $save_data['values']['name'] = $user->name;  
      $save_data['values']['status'] = 1;
      $save_data['values']['op'] = t('Save');
      _drupal_execute('handbook_article_node_form', $save_data, $node);
      $new_nodes[] = $save_data['values']['title'];
    }
  }

  if (!is_dir('./' . file_directory_path() . '/update_logs/')) {
    mkdir('./' . file_directory_path() . '/update_logs/');
  }

  $logfile = './' . file_directory_path() . '/update_logs/' . date('U') . '_update_log.txt';
  $handle = fopen($logfile, "a");

  fwrite($handle, "\n\n");
  if (!empty($new_nodes)) {
    fwrite($handle, "##### Newly created content #####\n");
    foreach ($new_nodes as $new_title) { 
      fwrite($handle, $new_title . "\n");
    }
  } else {
    fwrite($handle, "\n##### Newly created content #####\n[NONE]\n");
  }
  if (!empty($updated_nodes)) {  
    fwrite($handle, "\n##### Updated content #####\n");
    foreach ($updated_nodes as $new_title) { 
      fwrite($handle, $new_title . "\n");
    }
  } else {
    fwrite($handle, "\n##### Updated content #####\n[NONE]\n");
  }
  if (!empty($not_changed)) {
    fwrite($handle, "\n##### Content not changed #####\n");
    foreach ($not_changed as $new_title) { 
      fwrite($handle, $new_title . "\n");
    }
  } else {
    fwrite($handle, "\n##### Content not changed #####\n[NONE]\n");
  }
  fclose($handle);

  $message = 'PNW Handbook content has been updated. Click <a target="_blank" href="' . base_path() . file_directory_path() . '/update_logs/' . date('U') . '_update_log.txt">here</a> to view update log.';
  drupal_set_message(t($message));
}

/***********************************************************************************************************************************************/

function split_text($text) {
  preg_match('/<h3(.*?)>(.*?)<\/h3>/mi', $text, $matches);
  $count = 0;
  if (isset($matches['0'])) {
    if (substr($text, 0, strlen($matches['0'])) != $matches['0']) { //If $text does not start with an <h3>...</h3> tag
      $first_section['title'] = t("Page 1");
      $first_section['body'] = substr($text, 0, strpos($text, $matches['0']));
      $text = substr($text, strpos($text, $matches['0']));
      $section[] = $first_section;
      $count = 1;
    } elseif ($matches['2'] == "") { //If $text starts with <h3></h3>
      $first_section['title'] = "Page 1";
      $text = substr($text, strlen($matches['0']));
      preg_match('/<h3(.*?)>(.*?)<\/h3>/mi', $text, $matches);
      if (isset($matches['0'])) {
        $first_section['body'] = substr($text, 0, strpos($text, $matches['0']));
        $text = substr($text, strpos($text, $matches['0']));
      } else {
        $first_section['body'] = $text;
        $text = '';
      }
      $section[] = $first_section;
      $count = 1;
    }
    preg_match('/<h3(.*?)>(.*?)<\/h3>/mi', $text, $matches);
    while (isset($matches['2'])):
      $count ++;
      preg_match('/<h3(.*?)>(.*?)<\/h3>/mi', $text, $matches);
      
      $title_bare = trim(strip_tags($matches['2']));
      if ($title_bare != "") {
        $new_title = preg_replace('/\s*-+\s*/', '-', $title_bare);
      } else {
        $new_title = "Page $count";
      }
      $new_section['title'] = $new_title;
      $text = substr($text, strlen($matches['0']));
      preg_match('/<h3(.*?)>(.*?)<\/h3>/mi', $text, $matches);
      if (isset($matches['0'])) {
        $new_section['body'] = substr($text, 0, strpos($text, $matches['0']));
        $text = substr($text, strpos($text, $matches['0']));
      } else {
        $new_section['body'] = $text;
        $text = '';
      }
      $section[] = $new_section;
    endwhile;

  } else {
    // No matches, send back full text
    $section['0']['title'] = t("Page 1");
    $section['0']['body'] = $text;
  }
  return $section;
}

function _drupal_execute($form_id, &$form_state) {
  $args = func_get_args();

  // Make sure $form_state is passed around by reference.
  $args[1] = &$form_state;
  
  $form = call_user_func_array('drupal_retrieve_form', $args);
  $form['#post'] = $form_state['values'];
  drupal_prepare_form($form_id, $form, $form_state);
  _drupal_process_form($form_id, $form, $form_state);
}

function _drupal_process_form($form_id, &$form, &$form_state) {
  $form_state['values'] = array();

  $form = form_builder($form_id, $form, $form_state);
  // Only process the form if it is programmed or the form_id coming
  // from the POST data is set and matches the current form_id.
  if ((!empty($form['#programmed'])) || (!empty($form['#post']) && (isset($form['#post']['form_id']) && ($form['#post']['form_id'] == $form_id)))) {
    $form_state['process_input'] = TRUE;
    _drupal_validate_form($form_id, $form, $form_state);

    // form_clean_id() maintains a cache of element IDs it has seen,
    // so it can prevent duplicates. We want to be sure we reset that
    // cache when a form is processed, so scenerios that result in
    // the form being built behind the scenes and again for the
    // browser don't increment all the element IDs needlessly.
    form_clean_id(NULL, TRUE);

    if ((!empty($form_state['submitted'])) && !form_get_errors() && empty($form_state['rebuild'])) {
      $form_state['redirect'] = NULL;
      form_execute_handlers('submit', $form, $form_state);

      // We'll clear out the cached copies of the form and its stored data
      // here, as we've finished with them. The in-memory copies are still
      // here, though.
      if (variable_get('cache', CACHE_DISABLED) == CACHE_DISABLED && !empty($form_state['values']['form_build_id'])) {
        cache_clear_all('form_'. $form_state['values']['form_build_id'], 'cache_form');
        cache_clear_all('storage_'. $form_state['values']['form_build_id'], 'cache_form');
      }

      // If batches were set in the submit handlers, we process them now,
      // possibly ending execution. We make sure we do not react to the batch
      // that is already being processed (if a batch operation performs a
      // drupal_execute).
      if ($batch =& batch_get() && !isset($batch['current_set'])) {
        // The batch uses its own copies of $form and $form_state for
        // late execution of submit handers and post-batch redirection.
        $batch['form'] = $form;
        $batch['form_state'] = $form_state;
        $batch['progressive'] = !$form['#programmed'];
        batch_process();
        // Execution continues only for programmatic forms.
        // For 'regular' forms, we get redirected to the batch processing
        // page. Form redirection will be handled in _batch_finished(),
        // after the batch is processed.
      }

      // If no submit handlers have populated the $form_state['storage']
      // bundle, and the $form_state['rebuild'] flag has not been set,
      // we're finished and should redirect to a new destination page
      // if one has been set (and a fresh, unpopulated copy of the form
      // if one hasn't). If the form was called by drupal_execute(),
      // however, we'll skip this and let the calling function examine
      // the resulting $form_state bundle itself.
      if (!$form['#programmed'] && empty($form_state['rebuild']) && empty($form_state['storage'])) {
        drupal_redirect_form($form, $form_state['redirect']);
      }
    }
  }
}

function _drupal_validate_form($form_id, $form, &$form_state) {
  $validated_forms = array();

  if (isset($validated_forms[$form_id])) {
    return;
  }

  // If the session token was set by drupal_prepare_form(), ensure that it
  // matches the current user's session.
  if (isset($form['#token'])) {
    if (!drupal_valid_token($form_state['values']['form_token'], $form['#token'])) {
      // Setting this error will cause the form to fail validation.
      form_set_error('form_token', t('Validation error, please try again. If this error persists, please contact the site administrator.'));
    }
  }

  _form_validate($form, $form_state, $form_id);
  $validated_forms[$form_id] = TRUE;
}